version: 2.1

executors:
  aws-cli-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo
    environment:
      AWS_DEFAULT_REGION: "us-east-1"

jobs:
  build-and-deploy:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run:
          name: Calculate cache key
          command: |
            find . -name 'pom.xml' -o -name 'gradlew*' -o -name '*.gradle*' | \
                    sort | xargs cat > /tmp/CIRCLECI_CACHE_KEY
      - restore_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
      - run:
          name: Run Maven Verify
          command: mvn verify
      - run:
          name: List Target Directory
          command: ls -la target
      - store_test_results:
          path: target/surefire-reports
      - save_cache:
          key: cache-{{ checksum "/tmp/CIRCLECI_CACHE_KEY" }}
          paths:
            - ~/.m2/repository
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build Docker Image
          command: |
            docker build -t to-do-service:latest .
      - run:
          name: Save Docker Image to Tar
          command: |
            docker save -o to-do-service.tar to-do-service:latest
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: Delete Existing CloudFormation Stack
          command: |
            aws cloudformation delete-stack --stack-name my-ec2-stack
            aws cloudformation wait stack-delete-complete --stack-name my-ec2-stack
      - run:
          name: Deploy CloudFormation Stack
          command: |
            aws cloudformation deploy \
              --template-file ec2-instance.yaml \
              --stack-name my-ec2-stack \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get EC2 Public DNS
          command: |
            INSTANCE_ID=$(aws cloudformation describe-stack-resources --stack-name my-ec2-stack --query "StackResources[?LogicalResourceId=='MyEC2Instance'].PhysicalResourceId" --output text)
            PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicDnsName" --output text)
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            echo "EC2 Public DNS: $PUBLIC_DNS"
            echo "PUBLIC_DNS=$PUBLIC_DNS" >> $BASH_ENV
            echo "PUBLIC_IP=$PUBLIC_IP" >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - "f2:f4:62:26:9d:18:37:39:f4:e0:83:50:05:eb:33:96:71:b4:76:b8"  # Replace with your actual SSH key fingerprint
      - run:
          name: Wait for EC2 to be ready
          command: |
            echo "Waiting for EC2 instance to be ready..."
            sleep 15
      - run:
          name: Install Docker on EC2
          command: |
            ssh -o StrictHostKeyChecking=no ec2-user@$PUBLIC_DNS "sudo yum update -y && sudo yum install docker -y && sudo service docker start && sudo usermod -a -G docker ec2-user"
      - run:
          name: Deploy Docker Image
          command: |
            scp -o StrictHostKeyChecking=no to-do-service.tar ec2-user@$PUBLIC_DNS:~/to-do-service.tar
            ssh -o StrictHostKeyChecking=no ec2-user@$PUBLIC_DNS "docker load -i ~/to-do-service.tar && docker run -d -p 8080:8080 to-do-service:latest"
      - run:
          name: Update Route 53 Record
          command: |
            ZONE_ID=Z08421263BR5DFSY38QRR
            RECORD_NAME=todoservice.vrios.net
            aws route53 change-resource-record-sets --hosted-zone-id $ZONE_ID --change-batch '
            {
              "Changes": [{
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "'"$RECORD_NAME"'",
                  "Type": "A",
                  "TTL": 300,
                  "ResourceRecords": [{"Value": "'"$PUBLIC_IP"'"}]
                }
              }]
            }'

workflows:
  build-and-deploy:
    jobs:
      - build-and-deploy
